/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.abelk.connectfive.api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import eu.abelk.connectfive.api.model.Names;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * StateResponse
 */
@JsonPropertyOrder({
  StateResponse.JSON_PROPERTY_PHASE,
  StateResponse.JSON_PROPERTY_MY_TURN,
  StateResponse.JSON_PROPERTY_I_AM_WINNER,
  StateResponse.JSON_PROPERTY_BOARD,
  StateResponse.JSON_PROPERTY_NAMES,
  StateResponse.JSON_PROPERTY_IAM_WINNER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-28T21:39:44.564672767+01:00[Europe/Budapest]")
public class StateResponse {
  /**
   * Gets or Sets phase
   */
  public enum PhaseEnum {
    WAITING_FOR_PLAYERS("WAITING_FOR_PLAYERS"),
    
    ONGOING_GAME("ONGOING_GAME"),
    
    PLAYER_DISCONNECTED("PLAYER_DISCONNECTED"),
    
    PLAYER_WON("PLAYER_WON");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PHASE = "phase";
  private PhaseEnum phase;

  public static final String JSON_PROPERTY_MY_TURN = "myTurn";
  private Boolean myTurn;

  public static final String JSON_PROPERTY_I_AM_WINNER = "iAmWinner";
  private Boolean iAmWinner;

  public static final String JSON_PROPERTY_BOARD = "board";
  private List<List<String>> board = new ArrayList<>();

  public static final String JSON_PROPERTY_NAMES = "names";
  private Names names;

  public static final String JSON_PROPERTY_IAM_WINNER = "iamWinner";
  private Boolean iamWinner;

  public StateResponse() { 
  }

  public StateResponse phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Get phase
   * @return phase
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PHASE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PhaseEnum getPhase() {
    return phase;
  }


  @JsonProperty(JSON_PROPERTY_PHASE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  public StateResponse myTurn(Boolean myTurn) {
    this.myTurn = myTurn;
    return this;
  }

   /**
   * Get myTurn
   * @return myTurn
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MY_TURN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getMyTurn() {
    return myTurn;
  }


  @JsonProperty(JSON_PROPERTY_MY_TURN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMyTurn(Boolean myTurn) {
    this.myTurn = myTurn;
  }


  public StateResponse iAmWinner(Boolean iAmWinner) {
    this.iAmWinner = iAmWinner;
    return this;
  }

   /**
   * Get iAmWinner
   * @return iAmWinner
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_I_AM_WINNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getiAmWinner() {
    return iAmWinner;
  }


  @JsonProperty(JSON_PROPERTY_I_AM_WINNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setiAmWinner(Boolean iAmWinner) {
    this.iAmWinner = iAmWinner;
  }


  public StateResponse board(List<List<String>> board) {
    this.board = board;
    return this;
  }

  public StateResponse addBoardItem(List<String> boardItem) {
    if (this.board == null) {
      this.board = new ArrayList<>();
    }
    this.board.add(boardItem);
    return this;
  }

   /**
   * Get board
   * @return board
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BOARD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<List<String>> getBoard() {
    return board;
  }


  @JsonProperty(JSON_PROPERTY_BOARD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBoard(List<List<String>> board) {
    this.board = board;
  }


  public StateResponse names(Names names) {
    this.names = names;
    return this;
  }

   /**
   * Get names
   * @return names
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Names getNames() {
    return names;
  }


  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNames(Names names) {
    this.names = names;
  }


  public StateResponse iamWinner(Boolean iamWinner) {
    this.iamWinner = iamWinner;
    return this;
  }

   /**
   * Get iamWinner
   * @return iamWinner
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IAM_WINNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIamWinner() {
    return iamWinner;
  }


  @JsonProperty(JSON_PROPERTY_IAM_WINNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIamWinner(Boolean iamWinner) {
    this.iamWinner = iamWinner;
  }


  /**
   * Return true if this StateResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StateResponse stateResponse = (StateResponse) o;
    return Objects.equals(this.phase, stateResponse.phase) &&
        Objects.equals(this.myTurn, stateResponse.myTurn) &&
        Objects.equals(this.iAmWinner, stateResponse.iAmWinner) &&
        Objects.equals(this.board, stateResponse.board) &&
        Objects.equals(this.names, stateResponse.names) &&
        Objects.equals(this.iamWinner, stateResponse.iamWinner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phase, myTurn, iAmWinner, board, names, iamWinner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StateResponse {\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    myTurn: ").append(toIndentedString(myTurn)).append("\n");
    sb.append("    iAmWinner: ").append(toIndentedString(iAmWinner)).append("\n");
    sb.append("    board: ").append(toIndentedString(board)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    iamWinner: ").append(toIndentedString(iamWinner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `phase` to the URL query string
    if (getPhase() != null) {
      joiner.add(String.format("%sphase%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPhase()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `myTurn` to the URL query string
    if (getMyTurn() != null) {
      joiner.add(String.format("%smyTurn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMyTurn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `iAmWinner` to the URL query string
    if (getiAmWinner() != null) {
      joiner.add(String.format("%siAmWinner%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getiAmWinner()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `board` to the URL query string
    if (getBoard() != null) {
      for (int i = 0; i < getBoard().size(); i++) {
        joiner.add(String.format("%sboard%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getBoard().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `names` to the URL query string
    if (getNames() != null) {
      joiner.add(getNames().toUrlQueryString(prefix + "names" + suffix));
    }

    // add `iamWinner` to the URL query string
    if (getIamWinner() != null) {
      joiner.add(String.format("%siamWinner%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIamWinner()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

